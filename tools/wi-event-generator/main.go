// Copyright 2014 Marc-Antoine Ruel. All rights reserved.
// Use of this source code is governed under the Apache License, Version 2.0
// that can be found in the LICENSE file.

// Generates editor/event_registry.go from wicore/events.go.
package main

import (
	"bytes"
	"fmt"
	"go/format"
	"io/ioutil"
	"os"
	"reflect"
	"strings"
	"text/template"

	"github.com/maruel/wi/wicore"
)

func formatSource(buf []byte) ([]byte, error) {
	src, err := format.Source(buf)
	if err != nil {
		b := bytes.Buffer{}
		fmt.Printf("// ERROR: internal error: invalid Go generated: %s\n", err)
		fmt.Printf("// Compile the package to analyze the error.\n\n")
		_, _ = b.Write(buf)
		src = b.Bytes()
	}
	return src, err
}

var tmpl = template.Must(template.New("render").Parse(`// generated by wi-event-generator; DO NOT EDIT

package editor

import (
  "errors"
  "sync"

  "github.com/maruel/wi/pkg/key"
  "github.com/maruel/wi/wicore"
)

type eventRegistry struct {
  lock   sync.Mutex
  nextID wicore.EventID

{{range .Events}}
	{{.Lower}} map[wicore.EventID]func({{.Args}}){{end}}
}

func (e *eventRegistry) Unregister(eventID wicore.EventID) error {
  e.lock.Lock()
  defer e.lock.Unlock(){{range .Events}}
  if _, ok := e.{{.Lower}}[eventID]; ok {
    delete(e.{{.Lower}}, eventID)
    return nil
  }{{end}}
	return errors.New("trying to unregister an non existing event listener")
}{{range .Events}}

func (e *eventRegistry) Register{{.Name}}(callback func({{.Args}})) wicore.EventID {
  e.lock.Lock()
  defer e.lock.Unlock()
  i := e.nextID
  e.nextID++
  e.{{.Lower}}[i] = callback
  return i
}

func (e *eventRegistry) on{{.Name}}({{.Args}}) {
  items := func() []func({{.Args}}) {
    e.lock.Lock()
    defer e.lock.Unlock()
    items := make([]func({{.Args}}), 0, len(e.{{.Lower}}))
    for _, c := range e.{{.Lower}} {
      items = append(items, c)
    }
    return items
  }()
  for _, item := range items {
    item({{.ArgsNames}})
  }
}{{end}}
`))

type Event struct {
	Name      string
	Lower     string
	Args      string
	ArgsNames string
}

type data struct {
	Events []Event
}

func getEvents() []Event {
	t := reflect.TypeOf((*wicore.EventRegistry)(nil)).Elem()
	events := make([]Event, 0, t.NumMethod()-1)
	for i := 0; i < t.NumMethod(); i++ {
		m := t.Method(i)
		if !strings.HasPrefix(m.Name, "Register") {
			continue
		}
		// That is *very* cheezy. The right way would be to use go/parser to
		// extract the argument names. For now, it's "good enough".
		argsStr := m.Type.String()[10:]
		argsStr = argsStr[:strings.LastIndex(argsStr, ")")-1]
		argsItems := strings.Split(argsStr, ", ")
		args := make([]string, 0, len(argsItems))
		argsNames := make([]string, 0, len(argsItems))
		if len(argsStr) > 0 {
			// Insert names 'a', 'b', ...
			for i, s := range argsItems {
				args = append(args, fmt.Sprintf("%c %s", i+'a', s))
				argsNames = append(argsNames, fmt.Sprintf("%c", i+'a'))
			}
		}
		name := m.Name[8:]
		lower := strings.ToLower(name[0:1]) + name[1:]
		events = append(events, Event{name, lower, strings.Join(args, ", "), strings.Join(argsNames, ", ")})
	}
	return events
}

func generate() ([]byte, error) {
	d := data{
		Events: getEvents(),
	}
	out := bytes.Buffer{}
	if err := tmpl.Execute(&out, d); err != nil {
		return nil, fmt.Errorf("failed to generate go code: %s", err)
	}
	return out.Bytes(), nil
}

func mainImpl() int {
	src, err := generate()
	if err != nil {
		fmt.Fprintf(os.Stderr, "%s\n", err)
		return 1
	}
	src, err = formatSource(src)
	err2 := ioutil.WriteFile("event_registry.go", src, 0644)
	//_, err2 := os.Stdout.Write(src)
	if err != nil {
		fmt.Fprintf(os.Stderr, "%s\n", err)
		return 1
	}
	if err2 != nil {
		fmt.Fprintf(os.Stderr, "%s\n", err2)
		return 1
	}
	return 0
}

func main() {
	os.Exit(mainImpl())
}
