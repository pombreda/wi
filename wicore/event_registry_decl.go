// generated by go run ../tools/wi-event-generator/main.go -output event_registry_decl.go; DO NOT EDIT

package wicore

import (
	"io"

	"github.com/maruel/wi/wicore/key"
	"github.com/maruel/wi/wicore/lang"
)

// EventListener is to be used to cancel an event listener.
type EventListener interface {
	io.Closer
}

// NumberEvents is the number of known events.
const NumberEvents = 12

// EventRegistryRPC is the low level interface to propagate events to plugins.
type EventRegistryRPC interface {
	TriggerCommandsRPC(packet PacketCommands, ignored *int) error
	TriggerDocumentCreatedRPC(packet PacketDocumentCreated, ignored *int) error
	TriggerDocumentCursorMovedRPC(packet PacketDocumentCursorMoved, ignored *int) error
	TriggerEditorKeyboardModeChangedRPC(packet PacketEditorKeyboardModeChanged, ignored *int) error
	TriggerEditorLanguageRPC(packet PacketEditorLanguage, ignored *int) error
	TriggerTerminalKeyPressedRPC(packet PacketTerminalKeyPressed, ignored *int) error
	TriggerTerminalMetaKeyPressedRPC(packet PacketTerminalMetaKeyPressed, ignored *int) error
	TriggerTerminalResizedRPC(packet PacketTerminalResized, ignored *int) error
	TriggerViewActivatedRPC(packet PacketViewActivated, ignored *int) error
	TriggerViewCreatedRPC(packet PacketViewCreated, ignored *int) error
	TriggerWindowCreatedRPC(packet PacketWindowCreated, ignored *int) error
	TriggerWindowResizedRPC(packet PacketWindowResized, ignored *int) error
}

// EventRegistry permits to register callbacks that are called on events.
//
// When the callback returns false, the next registered events are not called.
//
// Warning: This interface is automatically generated.
type EventRegistry interface {
	EventsDefinition
	EventRegistryRPC

	RegisterCommands(callback func(cmds EnqueuedCommands)) EventListener
	RegisterDocumentCreated(callback func(doc Document)) EventListener
	RegisterDocumentCursorMoved(callback func(doc Document, col int, row int)) EventListener
	RegisterEditorKeyboardModeChanged(callback func(mode KeyboardMode)) EventListener
	RegisterEditorLanguage(callback func(l lang.Language)) EventListener
	RegisterTerminalKeyPressed(callback func(k key.Press)) EventListener
	RegisterTerminalMetaKeyPressed(callback func(k key.Press)) EventListener
	RegisterTerminalResized(callback func()) EventListener
	RegisterViewActivated(callback func(view View)) EventListener
	RegisterViewCreated(callback func(view View)) EventListener
	RegisterWindowCreated(callback func(window Window)) EventListener
	RegisterWindowResized(callback func(window Window)) EventListener
}

// PacketCommands is for internal RPC use.
type PacketCommands struct {
	Cmds EnqueuedCommands
}

// PacketDocumentCreated is for internal RPC use.
type PacketDocumentCreated struct {
	Doc Document
}

// PacketDocumentCursorMoved is for internal RPC use.
type PacketDocumentCursorMoved struct {
	Doc Document
	Col int
	Row int
}

// PacketEditorKeyboardModeChanged is for internal RPC use.
type PacketEditorKeyboardModeChanged struct {
	Mode KeyboardMode
}

// PacketEditorLanguage is for internal RPC use.
type PacketEditorLanguage struct {
	L lang.Language
}

// PacketTerminalKeyPressed is for internal RPC use.
type PacketTerminalKeyPressed struct {
	K key.Press
}

// PacketTerminalMetaKeyPressed is for internal RPC use.
type PacketTerminalMetaKeyPressed struct {
	K key.Press
}

// PacketTerminalResized is for internal RPC use.
type PacketTerminalResized struct {
}

// PacketViewActivated is for internal RPC use.
type PacketViewActivated struct {
	View View
}

// PacketViewCreated is for internal RPC use.
type PacketViewCreated struct {
	View View
}

// PacketWindowCreated is for internal RPC use.
type PacketWindowCreated struct {
	Window Window
}

// PacketWindowResized is for internal RPC use.
type PacketWindowResized struct {
	Window Window
}
