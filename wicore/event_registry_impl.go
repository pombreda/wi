// generated by go run ../tools/wi-event-generator/main.go -output event_registry_impl.go -impl; DO NOT EDIT

package wicore

import (
	"errors"
	"sync"

	"github.com/maruel/wi/wicore/key"
	"github.com/maruel/wi/wicore/lang"
)

type listenerCommands struct {
	id       int
	callback func(a EnqueuedCommands)
}

type listenerDocumentCreated struct {
	id       int
	callback func(a Document)
}

type listenerDocumentCursorMoved struct {
	id       int
	callback func(a Document, b int, c int)
}

type listenerEditorKeyboardModeChanged struct {
	id       int
	callback func(a KeyboardMode)
}

type listenerEditorLanguage struct {
	id       int
	callback func(a lang.Language)
}

type listenerTerminalKeyPressed struct {
	id       int
	callback func(a key.Press)
}

type listenerTerminalMetaKeyPressed struct {
	id       int
	callback func(a key.Press)
}

type listenerTerminalResized struct {
	id       int
	callback func()
}

type listenerViewActivated struct {
	id       int
	callback func(a View)
}

type listenerViewCreated struct {
	id       int
	callback func(a View)
}

type listenerWindowCreated struct {
	id       int
	callback func(a Window)
}

type listenerWindowResized struct {
	id       int
	callback func(a Window)
}

// eventRegistry is automatically generated via wi-event-generator from the
// interface EventRegistry. It completely implemented EventRegistry.
type eventRegistry struct {
	lock     sync.Mutex
	nextID   int
	deferred chan<- func()

	commands                  []listenerCommands
	documentCreated           []listenerDocumentCreated
	documentCursorMoved       []listenerDocumentCursorMoved
	editorKeyboardModeChanged []listenerEditorKeyboardModeChanged
	editorLanguage            []listenerEditorLanguage
	terminalKeyPressed        []listenerTerminalKeyPressed
	terminalMetaKeyPressed    []listenerTerminalMetaKeyPressed
	terminalResized           []listenerTerminalResized
	viewActivated             []listenerViewActivated
	viewCreated               []listenerViewCreated
	windowCreated             []listenerWindowCreated
	windowResized             []listenerWindowResized
}

func MakeEventRegistry() (EventRegistry, chan func()) {
	// Reduce the odds of allocation within RegistryXXX() by using relatively
	// large buffers.
	c := make(chan func(), 2048)
	e := &eventRegistry{
		deferred:                  c,
		commands:                  make([]listenerCommands, 0, 64),
		documentCreated:           make([]listenerDocumentCreated, 0, 64),
		documentCursorMoved:       make([]listenerDocumentCursorMoved, 0, 64),
		editorKeyboardModeChanged: make([]listenerEditorKeyboardModeChanged, 0, 64),
		editorLanguage:            make([]listenerEditorLanguage, 0, 64),
		terminalKeyPressed:        make([]listenerTerminalKeyPressed, 0, 64),
		terminalMetaKeyPressed:    make([]listenerTerminalMetaKeyPressed, 0, 64),
		terminalResized:           make([]listenerTerminalResized, 0, 64),
		viewActivated:             make([]listenerViewActivated, 0, 64),
		viewCreated:               make([]listenerViewCreated, 0, 64),
		windowCreated:             make([]listenerWindowCreated, 0, 64),
		windowResized:             make([]listenerWindowResized, 0, 64),
	}
	return e, c
}

func (er *eventRegistry) unregister(eventID int) {
	er.lock.Lock()
	defer er.lock.Unlock()
	// TODO(maruel): The buffers are never reallocated, so it's effectively a
	// memory leak.
	switch eventID & 0xff000000 {
	case 0x1000000:
		for index, value := range er.commands {
			if value.id == eventID {
				copy(er.commands[index:], er.commands[index+1:])
				er.commands = er.commands[0 : len(er.commands)-1]
				return
			}
		}
	case 0x2000000:
		for index, value := range er.documentCreated {
			if value.id == eventID {
				copy(er.documentCreated[index:], er.documentCreated[index+1:])
				er.documentCreated = er.documentCreated[0 : len(er.documentCreated)-1]
				return
			}
		}
	case 0x3000000:
		for index, value := range er.documentCursorMoved {
			if value.id == eventID {
				copy(er.documentCursorMoved[index:], er.documentCursorMoved[index+1:])
				er.documentCursorMoved = er.documentCursorMoved[0 : len(er.documentCursorMoved)-1]
				return
			}
		}
	case 0x4000000:
		for index, value := range er.editorKeyboardModeChanged {
			if value.id == eventID {
				copy(er.editorKeyboardModeChanged[index:], er.editorKeyboardModeChanged[index+1:])
				er.editorKeyboardModeChanged = er.editorKeyboardModeChanged[0 : len(er.editorKeyboardModeChanged)-1]
				return
			}
		}
	case 0x5000000:
		for index, value := range er.editorLanguage {
			if value.id == eventID {
				copy(er.editorLanguage[index:], er.editorLanguage[index+1:])
				er.editorLanguage = er.editorLanguage[0 : len(er.editorLanguage)-1]
				return
			}
		}
	case 0x6000000:
		for index, value := range er.terminalKeyPressed {
			if value.id == eventID {
				copy(er.terminalKeyPressed[index:], er.terminalKeyPressed[index+1:])
				er.terminalKeyPressed = er.terminalKeyPressed[0 : len(er.terminalKeyPressed)-1]
				return
			}
		}
	case 0x7000000:
		for index, value := range er.terminalMetaKeyPressed {
			if value.id == eventID {
				copy(er.terminalMetaKeyPressed[index:], er.terminalMetaKeyPressed[index+1:])
				er.terminalMetaKeyPressed = er.terminalMetaKeyPressed[0 : len(er.terminalMetaKeyPressed)-1]
				return
			}
		}
	case 0x8000000:
		for index, value := range er.terminalResized {
			if value.id == eventID {
				copy(er.terminalResized[index:], er.terminalResized[index+1:])
				er.terminalResized = er.terminalResized[0 : len(er.terminalResized)-1]
				return
			}
		}
	case 0x9000000:
		for index, value := range er.viewActivated {
			if value.id == eventID {
				copy(er.viewActivated[index:], er.viewActivated[index+1:])
				er.viewActivated = er.viewActivated[0 : len(er.viewActivated)-1]
				return
			}
		}
	case 0xa000000:
		for index, value := range er.viewCreated {
			if value.id == eventID {
				copy(er.viewCreated[index:], er.viewCreated[index+1:])
				er.viewCreated = er.viewCreated[0 : len(er.viewCreated)-1]
				return
			}
		}
	case 0xb000000:
		for index, value := range er.windowCreated {
			if value.id == eventID {
				copy(er.windowCreated[index:], er.windowCreated[index+1:])
				er.windowCreated = er.windowCreated[0 : len(er.windowCreated)-1]
				return
			}
		}
	case 0xc000000:
		for index, value := range er.windowResized {
			if value.id == eventID {
				copy(er.windowResized[index:], er.windowResized[index+1:])
				er.windowResized = er.windowResized[0 : len(er.windowResized)-1]
				return
			}
		}
	}
}

func (er *eventRegistry) RegisterCommands(callback func(a EnqueuedCommands)) EventListener {
	er.lock.Lock()
	defer er.lock.Unlock()
	i := er.nextID
	er.nextID++
	er.commands = append(er.commands, listenerCommands{i, callback})
	return &eventListener{er, i | 0x1000000}
}

func (er *eventRegistry) TriggerCommands(a EnqueuedCommands) {
	er.deferred <- func() {
		items := func() []func(a EnqueuedCommands) {
			er.lock.Lock()
			defer er.lock.Unlock()
			items := make([]func(a EnqueuedCommands), 0, len(er.commands))
			for _, item := range er.commands {
				items = append(items, item.callback)
			}
			return items
		}()
		for _, item := range items {
			item(a)
		}
	}
}

func (er *eventRegistry) RegisterDocumentCreated(callback func(a Document)) EventListener {
	er.lock.Lock()
	defer er.lock.Unlock()
	i := er.nextID
	er.nextID++
	er.documentCreated = append(er.documentCreated, listenerDocumentCreated{i, callback})
	return &eventListener{er, i | 0x2000000}
}

func (er *eventRegistry) TriggerDocumentCreated(a Document) {
	er.deferred <- func() {
		items := func() []func(a Document) {
			er.lock.Lock()
			defer er.lock.Unlock()
			items := make([]func(a Document), 0, len(er.documentCreated))
			for _, item := range er.documentCreated {
				items = append(items, item.callback)
			}
			return items
		}()
		for _, item := range items {
			item(a)
		}
	}
}

func (er *eventRegistry) RegisterDocumentCursorMoved(callback func(a Document, b int, c int)) EventListener {
	er.lock.Lock()
	defer er.lock.Unlock()
	i := er.nextID
	er.nextID++
	er.documentCursorMoved = append(er.documentCursorMoved, listenerDocumentCursorMoved{i, callback})
	return &eventListener{er, i | 0x3000000}
}

func (er *eventRegistry) TriggerDocumentCursorMoved(a Document, b int, c int) {
	er.deferred <- func() {
		items := func() []func(a Document, b int, c int) {
			er.lock.Lock()
			defer er.lock.Unlock()
			items := make([]func(a Document, b int, c int), 0, len(er.documentCursorMoved))
			for _, item := range er.documentCursorMoved {
				items = append(items, item.callback)
			}
			return items
		}()
		for _, item := range items {
			item(a, b, c)
		}
	}
}

func (er *eventRegistry) RegisterEditorKeyboardModeChanged(callback func(a KeyboardMode)) EventListener {
	er.lock.Lock()
	defer er.lock.Unlock()
	i := er.nextID
	er.nextID++
	er.editorKeyboardModeChanged = append(er.editorKeyboardModeChanged, listenerEditorKeyboardModeChanged{i, callback})
	return &eventListener{er, i | 0x4000000}
}

func (er *eventRegistry) TriggerEditorKeyboardModeChanged(a KeyboardMode) {
	er.deferred <- func() {
		items := func() []func(a KeyboardMode) {
			er.lock.Lock()
			defer er.lock.Unlock()
			items := make([]func(a KeyboardMode), 0, len(er.editorKeyboardModeChanged))
			for _, item := range er.editorKeyboardModeChanged {
				items = append(items, item.callback)
			}
			return items
		}()
		for _, item := range items {
			item(a)
		}
	}
}

func (er *eventRegistry) RegisterEditorLanguage(callback func(a lang.Language)) EventListener {
	er.lock.Lock()
	defer er.lock.Unlock()
	i := er.nextID
	er.nextID++
	er.editorLanguage = append(er.editorLanguage, listenerEditorLanguage{i, callback})
	return &eventListener{er, i | 0x5000000}
}

func (er *eventRegistry) TriggerEditorLanguage(a lang.Language) {
	er.deferred <- func() {
		items := func() []func(a lang.Language) {
			er.lock.Lock()
			defer er.lock.Unlock()
			items := make([]func(a lang.Language), 0, len(er.editorLanguage))
			for _, item := range er.editorLanguage {
				items = append(items, item.callback)
			}
			return items
		}()
		for _, item := range items {
			item(a)
		}
	}
}

func (er *eventRegistry) RegisterTerminalKeyPressed(callback func(a key.Press)) EventListener {
	er.lock.Lock()
	defer er.lock.Unlock()
	i := er.nextID
	er.nextID++
	er.terminalKeyPressed = append(er.terminalKeyPressed, listenerTerminalKeyPressed{i, callback})
	return &eventListener{er, i | 0x6000000}
}

func (er *eventRegistry) TriggerTerminalKeyPressed(a key.Press) {
	er.deferred <- func() {
		items := func() []func(a key.Press) {
			er.lock.Lock()
			defer er.lock.Unlock()
			items := make([]func(a key.Press), 0, len(er.terminalKeyPressed))
			for _, item := range er.terminalKeyPressed {
				items = append(items, item.callback)
			}
			return items
		}()
		for _, item := range items {
			item(a)
		}
	}
}

func (er *eventRegistry) RegisterTerminalMetaKeyPressed(callback func(a key.Press)) EventListener {
	er.lock.Lock()
	defer er.lock.Unlock()
	i := er.nextID
	er.nextID++
	er.terminalMetaKeyPressed = append(er.terminalMetaKeyPressed, listenerTerminalMetaKeyPressed{i, callback})
	return &eventListener{er, i | 0x7000000}
}

func (er *eventRegistry) TriggerTerminalMetaKeyPressed(a key.Press) {
	er.deferred <- func() {
		items := func() []func(a key.Press) {
			er.lock.Lock()
			defer er.lock.Unlock()
			items := make([]func(a key.Press), 0, len(er.terminalMetaKeyPressed))
			for _, item := range er.terminalMetaKeyPressed {
				items = append(items, item.callback)
			}
			return items
		}()
		for _, item := range items {
			item(a)
		}
	}
}

func (er *eventRegistry) RegisterTerminalResized(callback func()) EventListener {
	er.lock.Lock()
	defer er.lock.Unlock()
	i := er.nextID
	er.nextID++
	er.terminalResized = append(er.terminalResized, listenerTerminalResized{i, callback})
	return &eventListener{er, i | 0x8000000}
}

func (er *eventRegistry) TriggerTerminalResized() {
	er.deferred <- func() {
		items := func() []func() {
			er.lock.Lock()
			defer er.lock.Unlock()
			items := make([]func(), 0, len(er.terminalResized))
			for _, item := range er.terminalResized {
				items = append(items, item.callback)
			}
			return items
		}()
		for _, item := range items {
			item()
		}
	}
}

func (er *eventRegistry) RegisterViewActivated(callback func(a View)) EventListener {
	er.lock.Lock()
	defer er.lock.Unlock()
	i := er.nextID
	er.nextID++
	er.viewActivated = append(er.viewActivated, listenerViewActivated{i, callback})
	return &eventListener{er, i | 0x9000000}
}

func (er *eventRegistry) TriggerViewActivated(a View) {
	er.deferred <- func() {
		items := func() []func(a View) {
			er.lock.Lock()
			defer er.lock.Unlock()
			items := make([]func(a View), 0, len(er.viewActivated))
			for _, item := range er.viewActivated {
				items = append(items, item.callback)
			}
			return items
		}()
		for _, item := range items {
			item(a)
		}
	}
}

func (er *eventRegistry) RegisterViewCreated(callback func(a View)) EventListener {
	er.lock.Lock()
	defer er.lock.Unlock()
	i := er.nextID
	er.nextID++
	er.viewCreated = append(er.viewCreated, listenerViewCreated{i, callback})
	return &eventListener{er, i | 0xa000000}
}

func (er *eventRegistry) TriggerViewCreated(a View) {
	er.deferred <- func() {
		items := func() []func(a View) {
			er.lock.Lock()
			defer er.lock.Unlock()
			items := make([]func(a View), 0, len(er.viewCreated))
			for _, item := range er.viewCreated {
				items = append(items, item.callback)
			}
			return items
		}()
		for _, item := range items {
			item(a)
		}
	}
}

func (er *eventRegistry) RegisterWindowCreated(callback func(a Window)) EventListener {
	er.lock.Lock()
	defer er.lock.Unlock()
	i := er.nextID
	er.nextID++
	er.windowCreated = append(er.windowCreated, listenerWindowCreated{i, callback})
	return &eventListener{er, i | 0xb000000}
}

func (er *eventRegistry) TriggerWindowCreated(a Window) {
	er.deferred <- func() {
		items := func() []func(a Window) {
			er.lock.Lock()
			defer er.lock.Unlock()
			items := make([]func(a Window), 0, len(er.windowCreated))
			for _, item := range er.windowCreated {
				items = append(items, item.callback)
			}
			return items
		}()
		for _, item := range items {
			item(a)
		}
	}
}

func (er *eventRegistry) RegisterWindowResized(callback func(a Window)) EventListener {
	er.lock.Lock()
	defer er.lock.Unlock()
	i := er.nextID
	er.nextID++
	er.windowResized = append(er.windowResized, listenerWindowResized{i, callback})
	return &eventListener{er, i | 0xc000000}
}

func (er *eventRegistry) TriggerWindowResized(a Window) {
	er.deferred <- func() {
		items := func() []func(a Window) {
			er.lock.Lock()
			defer er.lock.Unlock()
			items := make([]func(a Window), 0, len(er.windowResized))
			for _, item := range er.windowResized {
				items = append(items, item.callback)
			}
			return items
		}()
		for _, item := range items {
			item(a)
		}
	}
}

type unregister interface {
	unregister(id int)
}

type eventListener struct {
	unregister unregister
	id         int
}

func (e *eventListener) Close() error {
	if e.id == 0 {
		return errors.New("EventListener already closed")
	}
	e.unregister.unregister(e.id)
	e.id = 0
	return nil
}
