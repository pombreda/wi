// generated by go run ../tools/wi-event-generator/main.go -output event_registry_impl.go -impl; DO NOT EDIT

package editor

import (
	"errors"
	"sync"

	"github.com/maruel/wi/pkg/key"
	"github.com/maruel/wi/pkg/lang"
	"github.com/maruel/wi/wicore"
)

type eventCommands struct {
	id       wicore.EventListenerID
	callback func(a wicore.EnqueuedCommands)
}

type eventDocumentCreated struct {
	id       wicore.EventListenerID
	callback func(a wicore.Document)
}

type eventDocumentCursorMoved struct {
	id       wicore.EventListenerID
	callback func(a wicore.Document, b int, c int)
}

type eventEditorKeyboardModeChanged struct {
	id       wicore.EventListenerID
	callback func(a wicore.KeyboardMode)
}

type eventEditorLanguage struct {
	id       wicore.EventListenerID
	callback func(a lang.Language)
}

type eventTerminalKeyPressed struct {
	id       wicore.EventListenerID
	callback func(a key.Press)
}

type eventTerminalMetaKeyPressed struct {
	id       wicore.EventListenerID
	callback func(a key.Press)
}

type eventTerminalResized struct {
	id       wicore.EventListenerID
	callback func()
}

type eventViewActivated struct {
	id       wicore.EventListenerID
	callback func(a wicore.View)
}

type eventViewCreated struct {
	id       wicore.EventListenerID
	callback func(a wicore.View)
}

type eventWindowCreated struct {
	id       wicore.EventListenerID
	callback func(a wicore.Window)
}

type eventWindowResized struct {
	id       wicore.EventListenerID
	callback func(a wicore.Window)
}

// eventRegistry is automatically generated via wi-event-generator from the
// interface wicore.EventRegistry.
type eventRegistry struct {
	lock     sync.Mutex
	nextID   wicore.EventListenerID
	deferred chan func()

	commands                  []eventCommands
	documentCreated           []eventDocumentCreated
	documentCursorMoved       []eventDocumentCursorMoved
	editorKeyboardModeChanged []eventEditorKeyboardModeChanged
	editorLanguage            []eventEditorLanguage
	terminalKeyPressed        []eventTerminalKeyPressed
	terminalMetaKeyPressed    []eventTerminalMetaKeyPressed
	terminalResized           []eventTerminalResized
	viewActivated             []eventViewActivated
	viewCreated               []eventViewCreated
	windowCreated             []eventWindowCreated
	windowResized             []eventWindowResized
}

func makeEventRegistry() eventRegistry {
	// Reduce the odds of allocation within RegistryXXX() by using relatively
	// large buffers.
	return eventRegistry{
		deferred:                  make(chan func(), 2048),
		commands:                  make([]eventCommands, 0, 64),
		documentCreated:           make([]eventDocumentCreated, 0, 64),
		documentCursorMoved:       make([]eventDocumentCursorMoved, 0, 64),
		editorKeyboardModeChanged: make([]eventEditorKeyboardModeChanged, 0, 64),
		editorLanguage:            make([]eventEditorLanguage, 0, 64),
		terminalKeyPressed:        make([]eventTerminalKeyPressed, 0, 64),
		terminalMetaKeyPressed:    make([]eventTerminalMetaKeyPressed, 0, 64),
		terminalResized:           make([]eventTerminalResized, 0, 64),
		viewActivated:             make([]eventViewActivated, 0, 64),
		viewCreated:               make([]eventViewCreated, 0, 64),
		windowCreated:             make([]eventWindowCreated, 0, 64),
		windowResized:             make([]eventWindowResized, 0, 64),
	}
}

func (er *eventRegistry) Unregister(eventID wicore.EventListenerID) error {
	er.lock.Lock()
	defer er.lock.Unlock()
	// TODO(maruel): The buffers are never reallocated, so it's effectively a
	// memory leak.
	switch eventID & wicore.EventListenerID(0xff000000) {
	case wicore.EventListenerID(0x1000000):
		for index, value := range er.commands {
			if value.id == eventID {
				copy(er.commands[index:], er.commands[index+1:])
				er.commands = er.commands[0 : len(er.commands)-1]
				return nil
			}
		}
	case wicore.EventListenerID(0x2000000):
		for index, value := range er.documentCreated {
			if value.id == eventID {
				copy(er.documentCreated[index:], er.documentCreated[index+1:])
				er.documentCreated = er.documentCreated[0 : len(er.documentCreated)-1]
				return nil
			}
		}
	case wicore.EventListenerID(0x3000000):
		for index, value := range er.documentCursorMoved {
			if value.id == eventID {
				copy(er.documentCursorMoved[index:], er.documentCursorMoved[index+1:])
				er.documentCursorMoved = er.documentCursorMoved[0 : len(er.documentCursorMoved)-1]
				return nil
			}
		}
	case wicore.EventListenerID(0x4000000):
		for index, value := range er.editorKeyboardModeChanged {
			if value.id == eventID {
				copy(er.editorKeyboardModeChanged[index:], er.editorKeyboardModeChanged[index+1:])
				er.editorKeyboardModeChanged = er.editorKeyboardModeChanged[0 : len(er.editorKeyboardModeChanged)-1]
				return nil
			}
		}
	case wicore.EventListenerID(0x5000000):
		for index, value := range er.editorLanguage {
			if value.id == eventID {
				copy(er.editorLanguage[index:], er.editorLanguage[index+1:])
				er.editorLanguage = er.editorLanguage[0 : len(er.editorLanguage)-1]
				return nil
			}
		}
	case wicore.EventListenerID(0x6000000):
		for index, value := range er.terminalKeyPressed {
			if value.id == eventID {
				copy(er.terminalKeyPressed[index:], er.terminalKeyPressed[index+1:])
				er.terminalKeyPressed = er.terminalKeyPressed[0 : len(er.terminalKeyPressed)-1]
				return nil
			}
		}
	case wicore.EventListenerID(0x7000000):
		for index, value := range er.terminalMetaKeyPressed {
			if value.id == eventID {
				copy(er.terminalMetaKeyPressed[index:], er.terminalMetaKeyPressed[index+1:])
				er.terminalMetaKeyPressed = er.terminalMetaKeyPressed[0 : len(er.terminalMetaKeyPressed)-1]
				return nil
			}
		}
	case wicore.EventListenerID(0x8000000):
		for index, value := range er.terminalResized {
			if value.id == eventID {
				copy(er.terminalResized[index:], er.terminalResized[index+1:])
				er.terminalResized = er.terminalResized[0 : len(er.terminalResized)-1]
				return nil
			}
		}
	case wicore.EventListenerID(0x9000000):
		for index, value := range er.viewActivated {
			if value.id == eventID {
				copy(er.viewActivated[index:], er.viewActivated[index+1:])
				er.viewActivated = er.viewActivated[0 : len(er.viewActivated)-1]
				return nil
			}
		}
	case wicore.EventListenerID(0xa000000):
		for index, value := range er.viewCreated {
			if value.id == eventID {
				copy(er.viewCreated[index:], er.viewCreated[index+1:])
				er.viewCreated = er.viewCreated[0 : len(er.viewCreated)-1]
				return nil
			}
		}
	case wicore.EventListenerID(0xb000000):
		for index, value := range er.windowCreated {
			if value.id == eventID {
				copy(er.windowCreated[index:], er.windowCreated[index+1:])
				er.windowCreated = er.windowCreated[0 : len(er.windowCreated)-1]
				return nil
			}
		}
	case wicore.EventListenerID(0xc000000):
		for index, value := range er.windowResized {
			if value.id == eventID {
				copy(er.windowResized[index:], er.windowResized[index+1:])
				er.windowResized = er.windowResized[0 : len(er.windowResized)-1]
				return nil
			}
		}
	}
	return errors.New("trying to unregister an non existing event listener")
}

func (er *eventRegistry) RegisterCommands(callback func(a wicore.EnqueuedCommands)) wicore.EventListenerID {
	er.lock.Lock()
	defer er.lock.Unlock()
	i := er.nextID
	er.nextID++
	er.commands = append(er.commands, eventCommands{i, callback})
	return i | wicore.EventListenerID(0x1000000)
}

func (er *eventRegistry) TriggerCommands(a wicore.EnqueuedCommands) {
	er.deferred <- func() {
		items := func() []func(a wicore.EnqueuedCommands) {
			er.lock.Lock()
			defer er.lock.Unlock()
			items := make([]func(a wicore.EnqueuedCommands), 0, len(er.commands))
			for _, item := range er.commands {
				items = append(items, item.callback)
			}
			return items
		}()
		for _, item := range items {
			item(a)
		}
	}
}

func (er *eventRegistry) RegisterDocumentCreated(callback func(a wicore.Document)) wicore.EventListenerID {
	er.lock.Lock()
	defer er.lock.Unlock()
	i := er.nextID
	er.nextID++
	er.documentCreated = append(er.documentCreated, eventDocumentCreated{i, callback})
	return i | wicore.EventListenerID(0x2000000)
}

func (er *eventRegistry) TriggerDocumentCreated(a wicore.Document) {
	er.deferred <- func() {
		items := func() []func(a wicore.Document) {
			er.lock.Lock()
			defer er.lock.Unlock()
			items := make([]func(a wicore.Document), 0, len(er.documentCreated))
			for _, item := range er.documentCreated {
				items = append(items, item.callback)
			}
			return items
		}()
		for _, item := range items {
			item(a)
		}
	}
}

func (er *eventRegistry) RegisterDocumentCursorMoved(callback func(a wicore.Document, b int, c int)) wicore.EventListenerID {
	er.lock.Lock()
	defer er.lock.Unlock()
	i := er.nextID
	er.nextID++
	er.documentCursorMoved = append(er.documentCursorMoved, eventDocumentCursorMoved{i, callback})
	return i | wicore.EventListenerID(0x3000000)
}

func (er *eventRegistry) TriggerDocumentCursorMoved(a wicore.Document, b int, c int) {
	er.deferred <- func() {
		items := func() []func(a wicore.Document, b int, c int) {
			er.lock.Lock()
			defer er.lock.Unlock()
			items := make([]func(a wicore.Document, b int, c int), 0, len(er.documentCursorMoved))
			for _, item := range er.documentCursorMoved {
				items = append(items, item.callback)
			}
			return items
		}()
		for _, item := range items {
			item(a, b, c)
		}
	}
}

func (er *eventRegistry) RegisterEditorKeyboardModeChanged(callback func(a wicore.KeyboardMode)) wicore.EventListenerID {
	er.lock.Lock()
	defer er.lock.Unlock()
	i := er.nextID
	er.nextID++
	er.editorKeyboardModeChanged = append(er.editorKeyboardModeChanged, eventEditorKeyboardModeChanged{i, callback})
	return i | wicore.EventListenerID(0x4000000)
}

func (er *eventRegistry) TriggerEditorKeyboardModeChanged(a wicore.KeyboardMode) {
	er.deferred <- func() {
		items := func() []func(a wicore.KeyboardMode) {
			er.lock.Lock()
			defer er.lock.Unlock()
			items := make([]func(a wicore.KeyboardMode), 0, len(er.editorKeyboardModeChanged))
			for _, item := range er.editorKeyboardModeChanged {
				items = append(items, item.callback)
			}
			return items
		}()
		for _, item := range items {
			item(a)
		}
	}
}

func (er *eventRegistry) RegisterEditorLanguage(callback func(a lang.Language)) wicore.EventListenerID {
	er.lock.Lock()
	defer er.lock.Unlock()
	i := er.nextID
	er.nextID++
	er.editorLanguage = append(er.editorLanguage, eventEditorLanguage{i, callback})
	return i | wicore.EventListenerID(0x5000000)
}

func (er *eventRegistry) TriggerEditorLanguage(a lang.Language) {
	er.deferred <- func() {
		items := func() []func(a lang.Language) {
			er.lock.Lock()
			defer er.lock.Unlock()
			items := make([]func(a lang.Language), 0, len(er.editorLanguage))
			for _, item := range er.editorLanguage {
				items = append(items, item.callback)
			}
			return items
		}()
		for _, item := range items {
			item(a)
		}
	}
}

func (er *eventRegistry) RegisterTerminalKeyPressed(callback func(a key.Press)) wicore.EventListenerID {
	er.lock.Lock()
	defer er.lock.Unlock()
	i := er.nextID
	er.nextID++
	er.terminalKeyPressed = append(er.terminalKeyPressed, eventTerminalKeyPressed{i, callback})
	return i | wicore.EventListenerID(0x6000000)
}

func (er *eventRegistry) TriggerTerminalKeyPressed(a key.Press) {
	er.deferred <- func() {
		items := func() []func(a key.Press) {
			er.lock.Lock()
			defer er.lock.Unlock()
			items := make([]func(a key.Press), 0, len(er.terminalKeyPressed))
			for _, item := range er.terminalKeyPressed {
				items = append(items, item.callback)
			}
			return items
		}()
		for _, item := range items {
			item(a)
		}
	}
}

func (er *eventRegistry) RegisterTerminalMetaKeyPressed(callback func(a key.Press)) wicore.EventListenerID {
	er.lock.Lock()
	defer er.lock.Unlock()
	i := er.nextID
	er.nextID++
	er.terminalMetaKeyPressed = append(er.terminalMetaKeyPressed, eventTerminalMetaKeyPressed{i, callback})
	return i | wicore.EventListenerID(0x7000000)
}

func (er *eventRegistry) TriggerTerminalMetaKeyPressed(a key.Press) {
	er.deferred <- func() {
		items := func() []func(a key.Press) {
			er.lock.Lock()
			defer er.lock.Unlock()
			items := make([]func(a key.Press), 0, len(er.terminalMetaKeyPressed))
			for _, item := range er.terminalMetaKeyPressed {
				items = append(items, item.callback)
			}
			return items
		}()
		for _, item := range items {
			item(a)
		}
	}
}

func (er *eventRegistry) RegisterTerminalResized(callback func()) wicore.EventListenerID {
	er.lock.Lock()
	defer er.lock.Unlock()
	i := er.nextID
	er.nextID++
	er.terminalResized = append(er.terminalResized, eventTerminalResized{i, callback})
	return i | wicore.EventListenerID(0x8000000)
}

func (er *eventRegistry) TriggerTerminalResized() {
	er.deferred <- func() {
		items := func() []func() {
			er.lock.Lock()
			defer er.lock.Unlock()
			items := make([]func(), 0, len(er.terminalResized))
			for _, item := range er.terminalResized {
				items = append(items, item.callback)
			}
			return items
		}()
		for _, item := range items {
			item()
		}
	}
}

func (er *eventRegistry) RegisterViewActivated(callback func(a wicore.View)) wicore.EventListenerID {
	er.lock.Lock()
	defer er.lock.Unlock()
	i := er.nextID
	er.nextID++
	er.viewActivated = append(er.viewActivated, eventViewActivated{i, callback})
	return i | wicore.EventListenerID(0x9000000)
}

func (er *eventRegistry) TriggerViewActivated(a wicore.View) {
	er.deferred <- func() {
		items := func() []func(a wicore.View) {
			er.lock.Lock()
			defer er.lock.Unlock()
			items := make([]func(a wicore.View), 0, len(er.viewActivated))
			for _, item := range er.viewActivated {
				items = append(items, item.callback)
			}
			return items
		}()
		for _, item := range items {
			item(a)
		}
	}
}

func (er *eventRegistry) RegisterViewCreated(callback func(a wicore.View)) wicore.EventListenerID {
	er.lock.Lock()
	defer er.lock.Unlock()
	i := er.nextID
	er.nextID++
	er.viewCreated = append(er.viewCreated, eventViewCreated{i, callback})
	return i | wicore.EventListenerID(0xa000000)
}

func (er *eventRegistry) TriggerViewCreated(a wicore.View) {
	er.deferred <- func() {
		items := func() []func(a wicore.View) {
			er.lock.Lock()
			defer er.lock.Unlock()
			items := make([]func(a wicore.View), 0, len(er.viewCreated))
			for _, item := range er.viewCreated {
				items = append(items, item.callback)
			}
			return items
		}()
		for _, item := range items {
			item(a)
		}
	}
}

func (er *eventRegistry) RegisterWindowCreated(callback func(a wicore.Window)) wicore.EventListenerID {
	er.lock.Lock()
	defer er.lock.Unlock()
	i := er.nextID
	er.nextID++
	er.windowCreated = append(er.windowCreated, eventWindowCreated{i, callback})
	return i | wicore.EventListenerID(0xb000000)
}

func (er *eventRegistry) TriggerWindowCreated(a wicore.Window) {
	er.deferred <- func() {
		items := func() []func(a wicore.Window) {
			er.lock.Lock()
			defer er.lock.Unlock()
			items := make([]func(a wicore.Window), 0, len(er.windowCreated))
			for _, item := range er.windowCreated {
				items = append(items, item.callback)
			}
			return items
		}()
		for _, item := range items {
			item(a)
		}
	}
}

func (er *eventRegistry) RegisterWindowResized(callback func(a wicore.Window)) wicore.EventListenerID {
	er.lock.Lock()
	defer er.lock.Unlock()
	i := er.nextID
	er.nextID++
	er.windowResized = append(er.windowResized, eventWindowResized{i, callback})
	return i | wicore.EventListenerID(0xc000000)
}

func (er *eventRegistry) TriggerWindowResized(a wicore.Window) {
	er.deferred <- func() {
		items := func() []func(a wicore.Window) {
			er.lock.Lock()
			defer er.lock.Unlock()
			items := make([]func(a wicore.Window), 0, len(er.windowResized))
			for _, item := range er.windowResized {
				items = append(items, item.callback)
			}
			return items
		}()
		for _, item := range items {
			item(a)
		}
	}
}
